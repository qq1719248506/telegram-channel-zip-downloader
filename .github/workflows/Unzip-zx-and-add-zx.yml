name: Unzip zx and add zx

on:
  #push:
  schedule:
    - cron: '0 */8 * * *'
# 这里默认24小时内执行3次
  workflow_dispatch:
  
jobs:

  run-python-script: 

    runs-on: ubuntu-latest

    steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0 # 获取所有历史记录，以便搜索ZIP文件
          
     - name: Set up Python 3.9
       uses: actions/setup-python@v5
       with:
        python-version: 3.9 # 可以根据需要更改 Python 版本
        
     - name: telethon download telegram channel zip
       env:
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
       run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python zx.py
        
     - name: Get the name of the downloaded ZIP file
       id: get-zip-name
       run: |
         # 设置字符编码为 UTF - 8，确保中文文件名能正确处理
         export LC_ALL=en_US.UTF-8
         # 定义下载 ZIP 文件所在的目录
         DOWNLOAD_DIR="./files/juejijianghu"
         # 查找下载的 ZIP 文件
         find_downloaded_zip() {
           local zip_files=("$DOWNLOAD_DIR"/*.zip)
           if [ ${#zip_files[@]} -eq 0 ]; then
             return 1
           fi
           echo "${zip_files[0]}"
         }
         downloaded_zip_name=$(find_downloaded_zip)
         if [ $? -ne 0 ]; then
           echo "错误：在 $DOWNLOAD_DIR 目录下未找到下载的 ZIP 文件。" >&2
           exit 1
         fi
         echo "DOWNLOADED_ZIP_NAME=$downloaded_zip_name" >> $GITHUB_ENV
         echo "成功获取下载的 ZIP 文件：$downloaded_zip_name"
     - name: List ZIP files in the repository
       id: list-zip-files
       run: |
         # 设置字符编码为 UTF - 8
         export LC_ALL=en_US.UTF-8
         # 检查当前目录是否为 Git 仓库
         is_git_repo() {
           git rev-parse --is-inside-work-tree > /dev/null 2>&1
         }
         if ! is_git_repo; then
           echo "错误：当前目录不是 Git 仓库。" >&2
           exit 1
         fi
         # 列出仓库中的所有 ZIP 文件
         list_repo_zip_files() {
           local raw_zip_files=$(git ls-tree -r --name-only HEAD | grep -E '\.zip$' || true)
           local decoded_zip_files=$(echo -e "$raw_zip_files")
           echo "$decoded_zip_files"
         }
         zip_files=$(list_repo_zip_files)
         if [ -z "$zip_files" ]; then
           echo "警告：仓库中没有 ZIP 文件。"
           echo "ZIP_FILES=" >> $GITHUB_ENV
         else
           echo "仓库中的 ZIP 文件列表（解码后）:"
           echo "$zip_files"
           echo "ZIP_FILES=$zip_files" >> $GITHUB_ENV
         fi
     - name: Check if downloaded ZIP filename matches a file in the repository
       id: check-match
       run: |
         # 设置字符编码为 UTF - 8
         export LC_ALL=en_US.UTF-8
         # 检查下载的 ZIP 文件名是否匹配仓库中的文件
         check_zip_match() {
           local downloaded_name="${1##*/}"
           local repo_files="$2"
           echo "$repo_files" | while IFS= read -r repo_file; do
             local repo_file_name="${repo_file##*/}"
             if [ "$repo_file_name" = "$downloaded_name" ]; then
               echo "true"
               return 0
             fi
           done
           echo "false"
         }
         if [ -z "${DOWNLOADED_ZIP_NAME:-}" ]; then
           echo "错误：未获取到下载的 ZIP 文件名。" >&2
           exit 1
         fi
         downloaded_zip_name="${DOWNLOADED_ZIP_NAME##*/}"
         echo "下载的 ZIP 文件名: $downloaded_zip_name"
         zip_files="${ZIP_FILES:-}"
         if [ -z "$zip_files" ]; then
           echo "ZIP 文件名不存在于仓库中，因为仓库中没有 ZIP 文件。"
           echo "ZIP_MATCH=false" >> $GITHUB_ENV
         else
           match_result=$(check_zip_match "$DOWNLOADED_ZIP_NAME" "$zip_files")
           if [ "$match_result" = "true" ]; then
             echo "ZIP 文件名已存在于仓库中。"
             echo "ZIP_MATCH=true" >> $GITHUB_ENV
           else
             echo "ZIP 文件名不存在于仓库中。"
             echo "ZIP_MATCH=false" >> $GITHUB_ENV
           fi
         fi
      
     - name: Unzip file
       if: env.ZIP_MATCH == 'false'
       run: |
          unzip -o files/juejijianghu/*.zip -d zx
         
     - name: Add unzipped files zx to zx
       if: env.ZIP_MATCH == 'false'
       run: |
          git clone --depth 5 --branch zx https://github.com/xinyi1984/xytv.git 
          rm -r xytv/json/*
          rm -r xytv/lib/*
          rm -r xytv/custom_spider.jar
          rm -r xytv/FongMi.json
          rm -r xytv/readme-tg.txt
          rm -r xytv/readme.txt
          rm -r xytv/*.zip
          mv ./zx/* xytv
          cp ./files/juejijianghu/*.zip xytv
          sed -i "s#\"sites\": \[#\"sites\": [{\"key\": \"应用商店\",\"name\": \"应用商店\",\"type\": 3,\"api\": \"csp_Market\",\"searchable\": 0,\"changeable\": 0,\"ext\": \"https://ghfast.top/https://raw.githubusercontent.com/xinyi1984/xytv/master/json/market.json\",\"jar\": \"https://ghfast.top/https://raw.githubusercontent.com/FongMi/CatVodSpider/main/jar/custom_spider.jar\"},#g" xytv/FongMi.json
          cd xytv
          if git diff --quiet; then
            echo "没有未提交的更改。"
          else
            echo "存在未提交的更改。"
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add --all
            git remote rm origin
            git remote add origin "https://xytv:${{ secrets.GITHUBXYTV_TOKEN }}@github.com/xinyi1984/xytv"
            git commit -m "更新FongMi Add unzipped files to xytv"
            git push -f -u origin zx
          fi
       continue-on-error: true
       
     - name: Upload zip To telegram-channel-zip-downloader
       if: env.ZIP_MATCH == 'false'
       run: |  
          rm -rf  xytv
          rm -r ./真心*.zip
          rm -r ./zx
          mv ./files/juejijianghu/*.zip .
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "更新zip"
          git push -f -u origin main
